# transcriber.py (Com verifica√ß√£o de tipo de arquivo)

import whisper
import pyperclip
import os
import re

print("Carregando modelo de transcri√ß√£o Whisper (pode demorar na primeira vez)...")
try:
    model = whisper.load_model("base")
    print("‚úÖ Modelo Whisper carregado com sucesso.")
except Exception as e:
    model = None
    print(f"‚ùå Falha ao carregar o modelo Whisper: {e}")

# --- IN√çCIO DA MUDAN√áA ---
# Lista de extens√µes de arquivo que o Whisper provavelmente consegue processar
EXTENSOES_VALIDAS = {".mp3", ".mp4", ".mpeg", ".mpga", ".m4a", ".wav", ".webm", ".mov", ".avi"}


# --- FIM DA MUDAN√áA ---

def extrair_caminho_do_clipboard():
    """Pega o conte√∫do da √°rea de transfer√™ncia e retorna um caminho de arquivo v√°lido."""
    clipboard_content = pyperclip.paste()
    match = re.search(r'\"?([A-Z]:\\[^:\n\r"]+)\"?', clipboard_content, re.IGNORECASE)
    if match:
        return match.group(1).strip()
    return None


def transcrever_localmente(caminho_arquivo):
    """Transcreve um arquivo de √°udio ou v√≠deo localmente usando Whisper."""
    if not model:
        return "O modelo de transcri√ß√£o n√£o est√° dispon√≠vel."
    if not os.path.exists(caminho_arquivo):
        return "Arquivo n√£o encontrado para transcri√ß√£o."

    # --- IN√çCIO DA MUDAN√áA ---
    # Verifica se a extens√£o do arquivo √© de √°udio ou v√≠deo antes de tentar
    nome_arquivo, extensao = os.path.splitext(caminho_arquivo)
    if extensao.lower() not in EXTENSOES_VALIDAS:
        print(f"‚ùå Erro: Arquivo '{caminho_arquivo}' n√£o √© um formato de √°udio/v√≠deo suportado.")
        return "Este n√£o parece ser um arquivo de √°udio ou v√≠deo."
    # --- FIM DA MUDAN√áA ---

    try:
        print(f"üéôÔ∏è Transcrevendo o arquivo localmente: {caminho_arquivo}")
        result = model.transcribe(caminho_arquivo)
        texto_transcrito = result["text"].strip()
        print("‚úÖ Transcri√ß√£o local conclu√≠da.")
        return texto_transcrito
    except Exception as e:
        # A mensagem de erro agora ser√° mais gen√©rica, pois j√° filtramos o caso mais comum
        print(f"ü§Ø Erro durante a transcri√ß√£o local: {e}")
        return f"Ocorreu um erro ao processar o arquivo."


def transcrever_audio_copiado():
    """Pega um caminho de arquivo da √°rea de transfer√™ncia e o transcreve."""
    caminho_do_arquivo = extrair_caminho_do_clipboard()
    if caminho_do_arquivo:
        texto = transcrever_localmente(caminho_do_arquivo)
        return texto
    else:
        return "N√£o encontrei um caminho de arquivo v√°lido na sua √°rea de transfer√™ncia."